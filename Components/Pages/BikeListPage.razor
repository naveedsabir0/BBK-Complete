@page "/Bikes"

@inherits PageBase
@attribute [Authorize(Roles = $"{Roles.Admin},{Roles.Staff}")]
@inject BikeService BikeService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<h3>Bike List</h3>

<input type="text"
       @bind="searchText"
       @oninput="SearchTextChanged"
       placeholder="Search by ID, make, or model..." />

@if (Bikes == null)
{
    <p><em>Loading...</em></p>
}
else if (filteredBikes == null || filteredBikes.Count == 0)
{
    <p>No bikes found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Make</th>
                <th>Model</th>
                <th>Cyclist</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var bike in filteredBikes)
            {
                <tr>
                    <td>@bike.Id</td>
                    <td>@bike.Make</td>
                    <td>@bike.Model</td>
                    <td>@(bike.Cyclist != null ? $"{bike.Cyclist.Forename} {bike.Cyclist.Surname}" : "Not assigned")</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => DeleteBike(bike.Id)">Delete</button>
                        <button class="btn btn-info" @onclick="() => ViewBikeDetails(bike.Id)">Details</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<button class="btn btn-success" @onclick="CreateBike">Add New Bike</button>

@if (showAddBikeForm)
{
    <h3>Add New Bike</h3>
    <div>
        <label for="make">Make:</label>
        <input type="text" id="make" @bind="newBike.Make" />
    </div>
    <div>
        <label for="model">Model:</label>
        <input type="text" id="model" @bind="newBike.Model" />
    </div>
    <div>
        <label for="cyclistId">Cyclist:</label>
        <select id="cyclistId" @bind="newBike.CyclistId">
            <option value="">Select Cyclist</option>
            @foreach (var cyclist in Cyclists)
            {
                <option value="@cyclist.Id">@($"{cyclist.Forename} {cyclist.Surname}")</option>
            }
        </select>
    </div>
    <div>
        <button class="btn btn-primary" @onclick="RegisterBike">Register Bike</button>
        <button class="btn btn-secondary" @onclick="CancelAddBike">Cancel</button>
    </div>
}

@code {
    private IList<Bike> Bikes;
    private IList<Bike> filteredBikes;
    private IList<Cyclist> Cyclists;
    private string searchText = string.Empty;
    private Bike newBike = new Bike();
    private bool showAddBikeForm = false;

    protected override async Task OnInitializedAsync()
    {
        Bikes = await BikeService.GetAllBikesAsync();
        filteredBikes = Bikes;
        Cyclists = await BikeService.GetAllCyclistsAsync();
    }

    private void SearchTextChanged(ChangeEventArgs e)
    {
        searchText = e.Value?.ToString() ?? string.Empty;
        FilterBikes();
    }

    private void FilterBikes()
    {
        if (Bikes != null)
        {
            filteredBikes = BikeService.FilterBikes(Bikes, searchText);
        }
    }

    private async Task DeleteBike(int id)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this bike?");
        if (confirmed)
        {
            await BikeService.DeleteBikeAsync(id);
            Bikes = await BikeService.GetAllBikesAsync();
            FilterBikes();
            StateHasChanged();
        }
    }

    private void CreateBike()
    {
        showAddBikeForm = true;
    }

    private void CancelAddBike()
    {
        showAddBikeForm = false;
        newBike = new Bike(); // Reset newBike object
    }

    private async Task RegisterBike()
    {
        await BikeService.AddBikeAsync(newBike);
        Bikes = await BikeService.GetAllBikesAsync();
        FilterBikes();
        showAddBikeForm = false;
        newBike = new Bike(); // Reset newBike object
    }

    private void ViewBikeDetails(int id)
    {
        NavigationManager.NavigateTo($"/Bikes/Details/{id}");
    }
}
